#ifndef __XQC_H3_QPACK_TOKEN_H__
#define __XQC_H3_QPACK_TOKEN_H__

#define XQC_QPACK_TOKEN_MAX_SIZE 256
#include "xqc_h3_qpack.h"


typedef enum {
    XQC_HTTP3_QPACK_TOKEN__AUTHORITY = 0,
    XQC_HTTP3_QPACK_TOKEN__PATH,
    XQC_HTTP3_QPACK_TOKEN_AGE,
    XQC_HTTP3_QPACK_TOKEN_CONTENT_DISPOSITION,
    XQC_HTTP3_QPACK_TOKEN_CONTENT_LENGTH,
    XQC_HTTP3_QPACK_TOKEN_COOKIE,
    XQC_HTTP3_QPACK_TOKEN_DATE,
    XQC_HTTP3_QPACK_TOKEN_ETAG,
    XQC_HTTP3_QPACK_TOKEN_IF_MODIFIED_SINCE,
    XQC_HTTP3_QPACK_TOKEN_IF_NONE_MATCH,
    XQC_HTTP3_QPACK_TOKEN_LAST_MODIFIED,
    XQC_HTTP3_QPACK_TOKEN_LINK,
    XQC_HTTP3_QPACK_TOKEN_LOCATION,
    XQC_HTTP3_QPACK_TOKEN_REFERER,
    XQC_HTTP3_QPACK_TOKEN_SET_COOKIE,
    XQC_HTTP3_QPACK_TOKEN__METHOD,
    XQC_HTTP3_QPACK_TOKEN__SCHEME,
    XQC_HTTP3_QPACK_TOKEN__STATUS,
    XQC_HTTP3_QPACK_TOKEN_ACCEPT,
    XQC_HTTP3_QPACK_TOKEN_ACCEPT_ENCODING,
    XQC_HTTP3_QPACK_TOKEN_ACCEPT_RANGES,
    XQC_HTTP3_QPACK_TOKEN_ACCESS_CONTROL_ALLOW_HEADERS,
    XQC_HTTP3_QPACK_TOKEN_ACCESS_CONTROL_ALLOW_ORIGIN,
    XQC_HTTP3_QPACK_TOKEN_CACHE_CONTROL,
    XQC_HTTP3_QPACK_TOKEN_CONTENT_ENCODING,
    XQC_HTTP3_QPACK_TOKEN_CONTENT_TYPE,
    XQC_HTTP3_QPACK_TOKEN_RANGE,
    XQC_HTTP3_QPACK_TOKEN_STRICT_TRANSPORT_SECURITY,
    XQC_HTTP3_QPACK_TOKEN_VARY,
    XQC_HTTP3_QPACK_TOKEN_X_CONTENT_TYPE_OPTIONS,
    XQC_HTTP3_QPACK_TOKEN_X_XSS_PROTECTION ,
    XQC_HTTP3_QPACK_TOKEN_ACCEPT_LANGUAGE,
    XQC_HTTP3_QPACK_TOKEN_ACCESS_CONTROL_ALLOW_CREDENTIALS,
    XQC_HTTP3_QPACK_TOKEN_ACCESS_CONTROL_ALLOW_METHODS,
    XQC_HTTP3_QPACK_TOKEN_ACCESS_CONTROL_EXPOSE_HEADERS,
    XQC_HTTP3_QPACK_TOKEN_ACCESS_CONTROL_REQUEST_HEADERS,
    XQC_HTTP3_QPACK_TOKEN_ACCESS_CONTROL_REQUEST_METHOD,
    XQC_HTTP3_QPACK_TOKEN_ALT_SVC,
    XQC_HTTP3_QPACK_TOKEN_AUTHORIZATION,
    XQC_HTTP3_QPACK_TOKEN_CONTENT_SECURITY_POLICY,
    XQC_HTTP3_QPACK_TOKEN_EARLY_DATA,
    XQC_HTTP3_QPACK_TOKEN_EXPECT_CT,
    XQC_HTTP3_QPACK_TOKEN_FORWARDED,
    XQC_HTTP3_QPACK_TOKEN_IF_RANGE,
    XQC_HTTP3_QPACK_TOKEN_ORIGIN,
    XQC_HTTP3_QPACK_TOKEN_PURPOSE,
    XQC_HTTP3_QPACK_TOKEN_SERVER,
    XQC_HTTP3_QPACK_TOKEN_TIMING_ALLOW_ORIGIN,
    XQC_HTTP3_QPACK_TOKEN_UPGRADE_INSECURE_REQUESTS,
    XQC_HTTP3_QPACK_TOKEN_USER_AGENT,
    XQC_HTTP3_QPACK_TOKEN_X_FORWARDED_FOR,
    XQC_HTTP3_QPACK_TOKEN_X_FRAME_OPTIONS,
    /* Additional header fields for HTTP messaging validation */
    XQC_HTTP3_QPACK_TOKEN_HOST,
    XQC_HTTP3_QPACK_TOKEN_CONNECTION,
    XQC_HTTP3_QPACK_TOKEN_KEEP_ALIVE,
    XQC_HTTP3_QPACK_TOKEN_PROXY_CONNECTION,
    XQC_HTTP3_QPACK_TOKEN_TRANSFER_ENCODING,
    XQC_HTTP3_QPACK_TOKEN_UPGRADE,
    XQC_HTTP3_QPACK_TOKEN_TE,
    XQC_HTTP3_QPACK_TOKEN_PROTOCOL,
    XQC_HTTP3_QPACK_TOKEN_UNKNOWN = XQC_QPACK_TOKEN_MAX_SIZE - 1
} xqc_http3_qpack_token;

inline static int xqc_memeq(const void *s1, const void *s2, size_t n) {
      return n == 0 || memcmp(s1, s2, n) == 0;
}


size_t xqc_get_qpack_static_table_size();

xqc_qpack_static_table_entry * xqc_get_qpack_static_table_entry(int idx);
uint64_t xqc_get_qpack_token_index_value(int token);
int xqc_qpack_lookup_token(const uint8_t *name, size_t namelen);

#endif
